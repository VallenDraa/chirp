import { type NextPage } from "next";
import { SignInButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import { type RouterOutputs, api } from "~/utils/api";
import React from "react";
import Image from "next/image";
import dayjs from "dayjs";
import relativeTime from "dayjs/plugin/relativeTime";
import { LoadingSpinner } from "~/components/loading-spinner";
import Link from "next/link";

dayjs.extend(relativeTime);

const CreatePostWizard: React.FC = () => {
  const { user } = useUser();

  if (!user) {
    return null;
  }

  return (
    <div className="flex flex-grow items-center">
      <Image
        className="h-14 w-14 rounded-full"
        src={user.profileImageUrl}
        alt={user.username ?? "User image"}
        height={56}
        width={56}
      />

      <input
        type="text"
        className="flex-grow bg-transparent px-4 py-2 text-slate-300 placeholder:text-slate-500 focus:outline-none"
        placeholder="Emojis please..."
      />
    </div>
  );
};

type PostWithUser = RouterOutputs["posts"]["getAll"][number];
const PostView = (props: PostWithUser) => {
  const { post, author } = props;

  return (
    <li className="flex items-center gap-4 rounded-lg bg-slate-800 p-4 shadow-slate-800">
      <Image
        className="h-12 w-12 rounded-full"
        src={author.profileImageUrl}
        alt={author.username ?? "User image"}
        height={48}
        width={48}
      />
      <div>
        <div className="flex items-center gap-1">
          <Link
            href="/"
            className="text-emerald-500 underline-offset-2 hover:underline"
          >{`@${author.username}`}</Link>
          <span className="text-sm text-slate-400">{`â€¢ ${dayjs(
            post.createdAt
          ).fromNow()}`}</span>
        </div>

        <p className="text-2xl">{post.content}</p>
      </div>
    </li>
  );
};

const Feed = () => {
  const { data: posts, isLoading: postsLoading } = api.posts.getAll.useQuery();

  if (postsLoading) {
    return (
      <div className="fixed left-1/2 top-1/2 -translate-x-1/2 -translate-y-1/2">
        <LoadingSpinner />;
      </div>
    );
  }

  if (!posts) {
    return <span>Something went wrong</span>;
  }

  return (
    <ul className="m-4 space-y-4">
      {posts.map(({ post, author }) => {
        return <PostView author={author} post={post} key={post.id} />;
      })}
    </ul>
  );
};

const Home: NextPage = () => {
  const { isSignedIn, isLoaded: userLoaded } = useUser();

  // so that the data is downloaded early
  // and cached
  api.posts.getAll.useQuery();

  // return empty div if user isn't loaded
  if (!userLoaded) {
    return <div />;
  }

  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen justify-center">
        <div className="h-full w-full max-w-screen-md bg-slate-900">
          <div className="flex w-full bg-slate-800 p-4 shadow shadow-slate-800">
            {!isSignedIn && (
              <div className="flex justify-center">
                <SignInButton />
              </div>
            )}

            {isSignedIn && <CreatePostWizard />}
          </div>

          <Feed />
        </div>
      </main>
    </>
  );
};

export default Home;
